openapi: 3.0.0
info:
  version: '1.0.1'
  description: "Salesforce API"
  title: Salesforce API
servers:
  - url: https://login.salesforce.com
    description: product Server
  - url: https://test.salesforce.com
    description: Sandbox Server
tags:
  - name: auth
    description: |
      User chatter login with username and password in SF.
  - name: product
    description: |
      Product (Service) use with SF API Restful.
  - name: Query
    description: |
      Query use with SF API Restful.
  - name: ObjectInfo
    description: |
      ObjectInfo use with SF API Restful.
  - name: User
    description: |
      User use with SF API Restful.
  - name: Sobjects
    description: |
      Sobjects use with SF API Restful.
x-tagGroups:
  - name: auth
    tags:
      - auth
  - name: product
    tags:
      - product
  - name: ObjectInfo
    tags:
      - ObjectInfo
  - name: Sobjects
    tags:
      - Sobjects
  - name: Query
    tags:
      - Query
security:
  - ApiKey: [ ]
paths:
  /services/oauth2/token:
    post:
      tags:
        - auth
      summary: User login into the system
      security: [ ]
      description: |
        User Login use
        - client_id
        - client_secret
        - username
        - password
      parameters:
        - name: client_id
          in: query
          description: client_id
          required: true
          type: string
          example: 3MVG9rnryk9FxFMV.jH7cMadE62T23L1jEyFyFWyMCpBHxr21qz1_mX4ocV4PXpyCKCKT6a9jOwIQ30fniGMT
        - name: client_secret
          in: query
          description: client_secret
          required: true
          type: string
          example: C4B42302452C5E62878C496DCF7998047AFDD118D4CBB059756C54BC69F71EFA
        - name: username
          in: query
          description: username
          required: true
          type: string
          example: salesforce@smartosc.vn.tuan
        - name: password
          in: query
          description: password
          required: true
          type: String
          example: tuandv1005
        - name: grant_type
          in: query
          description: grant_type
          required: true
          type: String
          example: password
      responses:
        '200':
          description: token
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date when token expires
        '400':
          description: Invalid
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /auth/logout:
    post:
      tags:
        - auth
      summary: User logout the system /auth/logout
      description: ""
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Success'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /product:
    get:
      tags:
        - product
      summary: Find list product /product
      description: "List product."
      operationId: getproduct
      parameters:
        - name: f
          in: query
          description: Fields
          required: false
          type: string
        - name: q
          in: query
          description: Conditions
          required: false
          type: string
        - name: limit
          in: query
          description: Limit
          required: false
          type: integer
        - name: offset
          in: query
          description: Offset
          required: false
          type: integer
        - name: orderBy
          in: query
          description: Order By
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/product"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - product
      summary: Create a product /product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
        description: Product resource
        required: true
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/PostSuccess"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /product/{id}:
    get:
      tags:
        - product
      summary: Find product by id /product/{id}
      description: Returns a single product
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "#/definitions/product"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - product
      summary: Update a product /product/{id}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
        description: Product resource
        required: true
      parameters:
        - name: id
          in: path
          description: Product id to update
          required: true
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid parameters supplied
    delete:
      tags:
        - product
      summary: Deletes a product /product/{id}
      description: ""
      parameters:
        - name: id
          in: path
          description: Product id to delete
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/Success'
        "204":
          description: Successful operation
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /object-info/{objectApiName}:
    get:
      tags:
        - ObjectInfo
      summary: Find list /object-info/{objectApiName}
      description: "List Object Info."
      operationId: getObjectInfo
      parameters:
        - name: objectApiName
          in: path
          description: Object Api Name
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Picklist"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /object-info/{objectApiName}/picklist-values/{recordTypeId}:
    get:
      tags:
        - ObjectInfo
      summary: Find list /object-info/{objectApiName}/picklist-values/{recordTypeId}
      description: "List Picklist."
      operationId: getPicklistValuesByRecordTypeId
      parameters:
        - name: objectApiName
          in: path
          description: Object Api Name
          required: true
          type: string
        - name: recordTypeId
          in: path
          description: Record Type Id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Picklist"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /object-info/{objectApiName}/picklist-values/{recordTypeId}/{fieldApiName}:
    get:
      tags:
        - ObjectInfo
      summary: Find Detail /object-info/{objectApiName}/picklist-values/{recordTypeId}/{fieldApiName}
      description: "List Picklist."
      operationId: getPicklistValuesDetailByRecordTypeId
      parameters:
        - name: objectApiName
          in: path
          description: Object Api Name
          required: true
          type: string
        - name: recordTypeId
          in: path
          description: Record Type Id
          required: true
          type: string
        - name: fieldApiName
          in: path
          description: Field Api Name
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Picklist"
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
  /sobjects/{object}/describe:
    get:
      tags:
        - Sobjects
      summary: Find describe by object /sobjects/{object}/describe
      description: |
        Returns describe sobjects with picklist value in field with Sobjects:
        Lead, Account, Contact
      parameters:
        - name: object
          in: path
          description: |
            object: Lead, Account, Contact
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
  /query:
    get:
      tags:
        - Query
      summary: Use Soql Syntax /query
      description: |
        Return data use soql syntax
      parameters:
        - name: q
          in: query
          description: SOQL query
          required: true
          type: string
      responses:
        "200":
          description: Successful operation
        '400':
          description: Invalid parameters supplied
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorize
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Error'
definitions:
  product:
    type: object
    properties:
      Name:
        description: Name
        type: string
        example: "CRM"
      ProductCode:
        description: Product Code
        type: string
        example: ""
      Sales_Start_Date__c:
        description: Sales Start Date
        type: string
        example: "2019-29-07"
      Sales_End_Date__c:
        description: Sales End Date
        type: string
        example: "2019-29-07"
      Support_Start_Date__c:
        description: Support Start Date
        type: string
        example: "2019-29-07"
      Support_End_Date__c:
        description: Support End Date
        type: string
        example: "2019-29-07"
      System_using__c:
        description: System using
        type: string
        example: ""
      Unit_Price__c:
        description: Unit Price
        type: string
        example: ""
    xml:
      name: product
  RecordType:
    type: object
    required:
      - Name
    properties:
      Name:
        description: Name
        type: string
        example: "Record Type Name"
    xml:
      name: RecordType
  Picklist:
    type: object
    required:
      - values
    properties:
      values:
        description: values
        type: string
        example: ""
    xml:
      name: RecordType
  Error:
    type: object
    properties:
      statusCode:
        type: integer
        minimum: 400
        maximum: 600
        description: The HTTP status code.
      statusMessage:
        type: string
      body:
        type: object
        properties:
          message:
            description: Failure
            type: string
          errorCode:
            description: Invalid_Params
  Success:
    type: object
    properties:
      statusCode:
        type: integer
        minimum: 100
        maximum: 399
        description: The HTTP status code.
      statusMessage:
        type: string
      body:
        type: object
        properties:
          message:
            description: Deleted success
            type: string
          errorCode:
            description: DELETE_SESSION
  PostSuccess:
    type: object
    properties:
      statusCode:
        type: integer
        minimum: 100
        maximum: 399
        description: The HTTP status code.
      statusMessage:
        type: string
      body:
        type: object
        properties:
          id:
            description: 0060w000002j6uSAAQ
            type: string
          success:
            description: true
          errors:
            description: [ ]
components:
  schemas:
    product:
      $ref: "#/definitions/product"
    products:
      type: array
      items:
        $ref: "#/definitions/product"
    AuthPassword:
      type: object
      required:
        - client_id
        - client_secret
        - username
        - password
      properties:
        client_id:
          description: Client Id
          type: string
          example: "3MVG9rnryk9FxFMV.jH7cMadE62T23L1jEyFyFWyMCpBHxr21qz1_mX4ocV4PXpyCKCKT6a9jOwIQ30fniGMT"
        client_secret:
          description: Client Secret
          type: string
          example: "C4B42302452C5E62878C496DCF7998047AFDD118D4CBB059756C54BC69F71EFA"
        username:
          description: username
          type: string
          example: "salesforce@smartosc.vn.tuan"
        password:
          description: password
          type: string
          example: "tuandv1005"
    ContentDLCreate:
      properties:
        statusCode:
          type: integer
        statusMessage:
          type: string
        body: object
    Error:
      type: object
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 600
          description: The HTTP status code.
        error:
          type: string
        type:
          type: string
          description: 'A URI reference that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".'
        title:
          type: string
          description: 'A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.'
    InvalidError:
      description: Invalid data was sent
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            invalidFields:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: The field name. Dot notation is used for nested object field names.
                  message:
                    type: string
              example:
                - field: field1
                  message: field1 is invalid
                - field: subObject.field2
                  message: field2 is invalid
                - field: subObject.field2
                  message: another error in the field2
  responses:
    AccessForbidden:
      description: 'Access forbidden, invalid token was used'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Found:
      description: Resource was moved
      headers:
        Location:
          schema:
            type: string
    InvalidDataError:
      description: Invalid data was sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidError'
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiKey:
      description: |
        Use access_token from login.
      name: Authorization
      type: apiKey
      in: header
